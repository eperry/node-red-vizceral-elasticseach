[{"id":"4e715ff9.81137","type":"tab","label":"Basic Flow","disabled":false,"info":""},{"id":"78412a21.75dd14","type":"tab","label":"Elasticsearch Flow","disabled":false,"info":""},{"id":"470a8c0e.e665f4","type":"tab","label":"Flow 1","disabled":true,"info":""},{"id":"4d8fbb15.143764","type":"tab","label":"Flow 2","disabled":true,"info":""},{"id":"d3445511.71feb8","type":"remote-server","z":"","name":"elk","host":"http://hd1melk20lx.digital.hbc.com:9200","timeout":"600000","reqtimeout":"600000"},{"id":"3fd1590.b4836a8","type":"switch","z":"4e715ff9.81137","name":"","property":"toggle","propertyType":"global","rules":[{"t":"eq","v":"simple","vt":"str"},{"t":"eq","v":"complex","vt":"str"},{"t":"else"}],"checkall":"true","repair":false,"outputs":3,"x":190,"y":180,"wires":[["7017ebce.1029c4"],["c0247242.ac13e"],["6805fe96.496c7"]]},{"id":"72dacd8e.b276a4","type":"http response","z":"4e715ff9.81137","name":"","statusCode":"","headers":{"content-type":"application/json"},"x":790,"y":180,"wires":[]},{"id":"bd3555a7.4f7bb8","type":"http in","z":"4e715ff9.81137","name":"/query-elasticsearch","url":"/query-elasticsearch","method":"get","upload":false,"swaggerDoc":"","x":150,"y":60,"wires":[["3fd1590.b4836a8"]]},{"id":"1986bafe.cab565","type":"template","z":"4e715ff9.81137","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"<html>\n    <body>\n    Toggle = {{ toggle }}\n    <table>\n        <tr><th>Vis URL</th><th>Search URL</th><th>Description</th></tr>\n        <tr><td><a href=\"/\">/</a><td><a href=\"/query-elasticsearch\">/query-elasticsearch</a></td><td>Visualation data </td></tr>\n        <tr><td></td><td><a href=\"/toggle?toggle=live\">/toggle?toggle=live</a></td><td>Visualation data with Live Elasticsearch Data</td></tr>\n        <tr><td></td><td><a href=\"/toggle?toggle=simple\">/toggle?toggle=simple</a></td><td>Visualation data with Simple Static Data</td></tr>\n        <tr><td></td><td><a href=\"/toggle?toggle=complex\">/toggle?toggle=complex</a></td><td>Visualation data with Complex Static Data</td></tr>\n\n    </table>\n    </body>\n</html>","output":"str","x":510,"y":300,"wires":[["6e4e111f.ff584"]]},{"id":"261b824f.38fe9e","type":"http in","z":"4e715ff9.81137","name":"/help.html","url":"/help.html","method":"get","upload":false,"swaggerDoc":"","x":120,"y":300,"wires":[["1986bafe.cab565"]]},{"id":"6e4e111f.ff584","type":"http response","z":"4e715ff9.81137","name":"","statusCode":"","headers":{"content-type":"text/html"},"x":650,"y":300,"wires":[]},{"id":"f1af5c77.98f4","type":"change","z":"4e715ff9.81137","name":"Search Query (toggle=0)","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"bluemartini-accesslogs\"}},{\"query_string\":{\"query\":\"host:sd1pxx1*\"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"regions\":{\"terms\":{\"field\":\"vhost\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"nodes\":{\"terms\":{\"field\":\"host_ip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":270,"y":700,"wires":[["3f5ec07.31f4e4"]]},{"id":"3f5ec07.31f4e4","type":"es-aggregations","z":"4e715ff9.81137","name":"s5a","documentIndex":"s5a-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":510,"y":700,"wires":[["4dfc8186.894c5"]]},{"id":"4dfc8186.894c5","type":"function","z":"4e715ff9.81137","name":"transform Node Data data","func":"function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nvar viz_data = msg.viz_data\n// Website \nvar n = msg.payload.aggregations.regions.buckets.map((r)=>{\n    let ri = viz_data.nodes.findIndex((f)=> f.name === r.key)\n    if ( ri >= 0 ){\n        viz_data.nodes[ri].nodes = r.nodes.buckets.map((m) =>{\n            return {\n                \"name\": m.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n        }).concat([{\n              \"name\": \"INTERNET\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            },{\"name\": \"F5\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"}]\n        )\n        let imet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for (i =0; i < r.metrics.buckets.length; i++){\n            if ( r.metrics.buckets[i].key < 400 )   imet.normal  += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 400 && \n                 r.metrics.buckets[i].key < 500 )   imet.warning += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 500 )  imet.danger  += r.metrics.buckets[i].doc_count;\n        }\n        c = r.nodes.buckets.map((m) =>{\n            let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for (i =0; i < m.metrics.buckets.length; i++){\n                if ( m.metrics.buckets[i].key < 400 )    met.normal  += m.metrics.buckets[i].doc_count;\n                if ( (m.metrics.buckets[i].key >= 400 ) && \n                     (m.metrics.buckets[i].key < 500) )  met.warning += m.metrics.buckets[i].doc_count;\n                if ( m.metrics.buckets[i].key >= 500 )   met.danger  += m.metrics.buckets[i].doc_count;\n            }\n            return {\n            \"source\": \"F5\",\n            \"target\":  m.key,\n            \"metrics\": met\n            }    \n        }).concat([\n            {   \"source\": \"INTERNET\",\n                \"target\":  \"F5\",\n                \"metrics\": imet\n            }\n            ])\n        viz_data.nodes[ri].connections=c\n    } // end region\n\n});\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":390,"y":760,"wires":[["831dc28c.b1301"]]},{"id":"831dc28c.b1301","type":"json","z":"4e715ff9.81137","name":"JSON to String","property":"payload","action":"str","pretty":true,"x":700,"y":800,"wires":[["e1aab4cc.2147e8"]]},{"id":"de63da9.2bdf928","type":"inject","z":"4e715ff9.81137","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":100,"y":640,"wires":[["f1af5c77.98f4"]]},{"id":"e1aab4cc.2147e8","type":"debug","z":"4e715ff9.81137","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":880,"y":800,"wires":[]},{"id":"f1cd6e91.6b892","type":"function","z":"78412a21.75dd14","name":"transform S5A BM  Website Data ","func":"var viz_data = msg.viz_data\n// bm Website for www.saksfifthavenue.com\nlet s5aIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\nlet websiteIndex   = msg.payload.aggregations.apps.buckets.findIndex((f)=> f.key === \"website\")\nlet s5aApache = viz_data.nodes[s5aIndex]\nlet websiteApp = msg.payload.aggregations.apps.buckets[websiteIndex]\n//create new nodes\nlet nodes = websiteApp.nodes.buckets.map((n)=>{\n            return {\n                \"name\": n.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n})\n\n// create connections between website and nodes\nwsConnNodes = websiteApp.nodes.buckets.map((m) =>{\n     let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n     for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": \"website\",\n    \"target\":  m.key,\n    \"metrics\": met\n    }    \n})\n\napacheConnWs = websiteApp.clients.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": m.key,\n    \"target\":  \"website\",\n    \"metrics\": met\n    }    \n})\n\n// Created Website Node\ns5aApache.nodes.push({\n              \"name\": \"website\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\",\n            })\ns5aApache.nodes = s5aApache.nodes.concat(nodes)\ns5aApache.connections = s5aApache.connections.concat(apacheConnWs).concat(wsConnNodes)\n\n\n//////////----------------------------------------\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":750,"y":260,"wires":[["442b72c8.af1f0c"]]},{"id":"a3a80981.44a068","type":"json","z":"78412a21.75dd14","name":"JSON to String","property":"payload","action":"str","pretty":true,"x":640,"y":540,"wires":[["ab4161d5.f0b77"]]},{"id":"e46f8c6e.21fa6","type":"function","z":"78412a21.75dd14","name":"transform Node Data data","func":"var dns = global.get('dns')\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nvar viz_data = msg.viz_data\nvar n = msg.payload.aggregations.regions.buckets.map((r)=>{\n    let ri = viz_data.nodes.findIndex((f)=> f.name === r.key)\n    if ( ri >= 0 ){\n        viz_data.nodes[ri].nodes = r.nodes.buckets.map((m) =>{\n            return {\n                \"name\": m.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n        }).concat([{\n              \"name\": \"INTERNET\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            },{\"name\": \"F5\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            }]\n        )\n        let imet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for (i =0; i < r.metrics.buckets.length; i++){\n            if ( r.metrics.buckets[i].key < 400 )   imet.normal  += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 400 && \n                 r.metrics.buckets[i].key < 500 )   imet.warning += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 500 )  imet.danger  += r.metrics.buckets[i].doc_count;\n        }\n        c = r.nodes.buckets.map((m) =>{\n            var dmkey;\n            dns.lookup(m.key, (err, address, family) => dmkey = address)\n            let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for (i =0; i < m.metrics.buckets.length; i++){\n                if ( m.metrics.buckets[i].key < 400 )    met.normal  += m.metrics.buckets[i].doc_count;\n                if ( (m.metrics.buckets[i].key >= 400 ) && \n                     (m.metrics.buckets[i].key < 500) )  met.warning += m.metrics.buckets[i].doc_count;\n                if ( m.metrics.buckets[i].key >= 500 )   met.danger  += m.metrics.buckets[i].doc_count;\n            }\n            return {\n            \"source\": \"F5\",\n            \"target\":  m.key,\n            \"metrics\": met\n            }    \n        }).concat([\n            {   \"source\": \"INTERNET\",\n                \"target\":  \"F5\",\n                \"metrics\": imet\n            }\n            ])\n        viz_data.nodes[ri].connections=c\n    } // end region\n\n});\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":670,"y":140,"wires":[["e7d5a666.3cec48"]]},{"id":"6b23e984.0c2f68","type":"function","z":"78412a21.75dd14","name":"transform reagion  data","func":"function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n}\nvar multiplierVolume=1.25\nvar whenupdate = Date.now();\nviz_data={\n            // Which graph renderer to use for this graph (currently only 'global' and 'region')\n            renderer: 'global',\n            // since the root object is a node, it has a name too.\n            name: 'edge',\n            // OPTIONAL: The maximum volume seen recently to relatively measure particle density. \n            // This 'global' maxVolume is optional because it can be calculated by using all of the required sub-node maxVolumes.\n            //maxVolume: msg.payload.hits.total.value*multiplierVolume,\n            maxVolume: 1000000,\n            // list of nodes for this graph\n            nodes: [\n                {\n                    \"renderer\": 'region',\n                    layout: 'ltrTree',\n                    // OPTIONAL Override the default layout used for the renderer.\n                    \"name\": 'INTERNET',\n                    // Unix timestamp. Only checked at this level of nodes. Last time the data was updated \n                    // (Needed because the client could be passed stale data when loaded)\n                    metadata: {},\n                    //maxVolume: msg.payload.hits.total.value*multiplierVolume,\n\n                    \"nodes\": [],\n                    \"notices\":[\n                         {\n                              // The title to display on the notice\n                              title: 'Notice about something',\n                              // OPTIONAL link to send the user when click on the notice\n                              link: 'http://link/to/relevant/thing',\n                              // OPTIONAL 0(default) for info level, 1 for warning level, 2 for error level (applies CSS styling)\n                              severity: 1\n                            }\n                     ],\n                    // The maximum volume seen recently to relatively measure particle density\n                }// end of INTERNET NODE\n            ],\n            connections:[]\n        }\n        \n\nviz_data.nodes.metrics = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\nfor (i =0; i < msg.payload.aggregations.metrics.buckets.length; i++){\n    if ( msg.payload.aggregations.metrics.buckets[i].key < 400 )                 viz_data.nodes.metrics.normal  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 400 && \n        msg.payload.aggregations.metrics.buckets[i].key < 500 ) viz_data.nodes.metrics.warning += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 500 )                viz_data.nodes.metrics.danger  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n}\n\nvar n = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )                 met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && m.metrics.buckets[i].key < 500 ) met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )                met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    return  {\n        \"name\": m.key,\n        \"renderer\": \"region\",\n        \"class\": \"normal\",\n        \"clusters\": [],\n        \"nodes\":[],\n        \"metrics\": met,\n        \"connections\": [],\n        \"updated\": whenupdate,\n        maxVolume: m.doc_count * multiplierVolume\n\n    }\n})\nviz_data.nodes = viz_data.nodes.concat(n)\n\nvar c = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && \n             m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    return {\n        \"source\": \"INTERNET\",\n        \"target\":  m.key,\n        \"metrics\": met\n    }\n});\nviz_data.connections = c\n\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":340,"y":160,"wires":[["e46f8c6e.21fa6"]]},{"id":"9602cb9d.f75698","type":"es-aggregations","z":"78412a21.75dd14","name":"S5A Webservers","documentIndex":"*:s5a","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":450,"y":40,"wires":[["6b23e984.0c2f68","c36d088b.a5cef8"]]},{"id":"f527f39c.dcfcd","type":"change","z":"78412a21.75dd14","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"viz_data","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":440,"y":540,"wires":[["a3a80981.44a068"]]},{"id":"ab4161d5.f0b77","type":"http response","z":"78412a21.75dd14","name":"","statusCode":"","headers":{"content-type":"application/json"},"x":830,"y":540,"wires":[]},{"id":"c36d088b.a5cef8","type":"debug","z":"78412a21.75dd14","name":"","active":false,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","x":670,"y":200,"wires":[]},{"id":"6805fe96.496c7","type":"link out","z":"4e715ff9.81137","name":"To Search Flow","links":["b28070a2.00605","fef11fea.6a94e","54b2cf27.4d075"],"x":355,"y":220,"wires":[]},{"id":"b28070a2.00605","type":"link in","z":"78412a21.75dd14","name":"Search","links":["6805fe96.496c7"],"x":115,"y":40,"wires":[["a8d3b59c.6bf598"]]},{"id":"9aae0b85.8e37c8","type":"http in","z":"4e715ff9.81137","name":"","url":"/toggle","method":"get","upload":false,"swaggerDoc":"","x":130,"y":380,"wires":[["70be60bc.012ae"]]},{"id":"70be60bc.012ae","type":"change","z":"4e715ff9.81137","name":"","rules":[{"t":"set","p":"toggle","pt":"global","to":"payload.toggle","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":360,"y":380,"wires":[["1986bafe.cab565","688d6542.21445c"]]},{"id":"688d6542.21445c","type":"debug","z":"4e715ff9.81137","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":620,"y":380,"wires":[]},{"id":"7017ebce.1029c4","type":"file in","z":"4e715ff9.81137","name":"sample_data_simple.json","filename":"./vizceral-example/src/sample_data_simple.json","format":"utf8","chunk":false,"sendError":false,"x":450,"y":140,"wires":[["72dacd8e.b276a4"]]},{"id":"c0247242.ac13e","type":"file in","z":"4e715ff9.81137","name":"sample_data.json","filename":"./vizceral-example/src/sample_data.json","format":"utf8","chunk":false,"sendError":false,"x":430,"y":180,"wires":[["72dacd8e.b276a4"]]},{"id":"45f73f1c.26ca8","type":"inject","z":"470a8c0e.e665f4","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"onceDelay":0.1,"x":110,"y":60,"wires":[["dafcf21c.7b208"]]},{"id":"32041b77.9cf554","type":"es-aggregations","z":"470a8c0e.e665f4","name":"S5A Webservers","documentIndex":"s5a-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":510,"y":160,"wires":[["c9114cee.d3c48"]]},{"id":"c9114cee.d3c48","type":"function","z":"470a8c0e.e665f4","name":"transform reagion  data","func":"var viz_data = global.get(\"viz_data\");  // this should now be \"bar\"\nviz_data.updated = Date.now();\n\nviz_data.nodes.metrics = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n\n\nfor (i =0; i < msg.payload.aggregations.metrics.buckets.length; i++){\n    if ( msg.payload.aggregations.metrics.buckets[i].key < 400 )   viz_data.nodes.metrics.normal  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 400 && \n        msg.payload.aggregations.metrics.buckets[i].key < 500 ) viz_data.nodes.metrics.warning += msg.payload.aggregations.metrics.buckets[i].doc_count;\n    if ( msg.payload.aggregations.metrics.buckets[i].key >= 500 )  viz_data.nodes.metrics.danger  += msg.payload.aggregations.metrics.buckets[i].doc_count;\n}\n\nvar n = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )                 met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && m.metrics.buckets[i].key < 500 ) met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )                met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    vizindex = viz_data.nodes.findIndex((vdn)=> vdn.name === m.name )\n    if ( vizindex >= 0 ){\n        viz_data.nodes[vizindex].metrics=met\n    }else{\n        viz_data.nodes.push({\n        \"name\": m.key,\n        \"renderer\": \"region\",\n        \"class\": \"normal\",\n        \"clusters\": [],\n        \"nodes\":[],\n        \"metrics\": met,\n        \"connections\": [],\n        \"updated\": Date.now(),\n        maxVolume: m.doc_count * 1.25\n    })\n    }\n})\nvar c = msg.payload.aggregations.regions.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n        if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 400 && \n             m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n        if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n    }\n    vizindex = viz_data.connections.findIndex((vdn)=> vdn.target === m.key && vdn.source===\"INTERNET\" )\n    if( vizindex >= 0 ) viz_data.connections[vizindex].metrics = met\n    else viz_data.connections.push({\n        \"source\": \"INTERNET\",\n        \"target\":  m.key,\n        \"metrics\": met\n        })\n});\n\nglobal.set(\"viz_data\",viz_data);\n\nreturn msg","outputs":1,"noerr":0,"x":760,"y":160,"wires":[["537f8a81.ea35b4"]]},{"id":"537f8a81.ea35b4","type":"function","z":"470a8c0e.e665f4","name":"transform Node Data data","func":"var viz_data = global.get(\"viz_data\");\n\nvar n = msg.payload.aggregations.regions.buckets.map((r)=>{\n    let ri = viz_data.nodes.findIndex((f)=> f.name === r.key)\n    if ( ri >= 0 ){\n        viz_data.nodes[ri].nodes = r.nodes.buckets.map((m) =>{\n            return {\n                \"name\": m.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n        }).concat([{\n              \"name\": \"INTERNET\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            },{\"name\": \"F5\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\"\n            }]\n        )\n        let imet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for (i =0; i < r.metrics.buckets.length; i++){\n            if ( r.metrics.buckets[i].key < 400 )   imet.normal  += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 400 && \n                 r.metrics.buckets[i].key < 500 )   imet.warning += r.metrics.buckets[i].doc_count;\n            if ( r.metrics.buckets[i].key >= 500 )  imet.danger  += r.metrics.buckets[i].doc_count;\n        }\n        c = r.nodes.buckets.map((m) =>{\n            let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for (i =0; i < m.metrics.buckets.length; i++){\n                if ( m.metrics.buckets[i].key < 400 )    met.normal  += m.metrics.buckets[i].doc_count;\n                if ( (m.metrics.buckets[i].key >= 400 ) && \n                     (m.metrics.buckets[i].key < 500) )  met.warning += m.metrics.buckets[i].doc_count;\n                if ( m.metrics.buckets[i].key >= 500 )   met.danger  += m.metrics.buckets[i].doc_count;\n            }\n            return {\n            \"source\": \"F5\",\n            \"target\":  m.key,\n            \"metrics\": met\n            }    \n        }).concat([\n            {   \"source\": \"INTERNET\",\n                \"target\":  \"F5\",\n                \"metrics\": imet\n            }\n            ])\n        viz_data.nodes[ri].connections=c\n    } // end region\n\n});\n\nglobal.set(\"viz_data\",viz_data);\nreturn msg","outputs":1,"noerr":0,"x":1010,"y":160,"wires":[[]]},{"id":"ac182e2.2239ad","type":"change","z":"470a8c0e.e665f4","name":"Search Webtier","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"apache\"}},{\"query_string\":{\"query\":\"host:sd1pwb*\"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"regions\":{\"terms\":{\"field\":\"vhost\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"nodes\":{\"terms\":{\"field\":\"host_ip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":300,"y":160,"wires":[["32041b77.9cf554"]]},{"id":"cb374a1.e207eb8","type":"inject","z":"470a8c0e.e665f4","name":"","topic":"","payload":"","payloadType":"date","repeat":"10","crontab":"","once":false,"onceDelay":"0.5","x":110,"y":320,"wires":[["ac182e2.2239ad"]]},{"id":"acca822e.43a93","type":"change","z":"470a8c0e.e665f4","name":"Search Query BM Access Logs","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"bluemartini-accesslogs\"}},{\"query_string\":{\"query\":\"host:sd1pxx1*\"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"apps\":{\"terms\":{\"field\":\"vhost\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}},\"nodes\":{\"terms\":{\"field\":\"host_ip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}},\"clients\":{\"terms\":{\"field\":\"clientip\"},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"response_code\"}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":370,"y":260,"wires":[["ef652ef1.f1247"]]},{"id":"ef652ef1.f1247","type":"es-aggregations","z":"470a8c0e.e665f4","name":"BM Access Logs","documentIndex":"s5a-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":650,"y":260,"wires":[["58c99312.a4c31c"]]},{"id":"58c99312.a4c31c","type":"function","z":"470a8c0e.e665f4","name":"transform BM Website Data ","func":"var viz_data = global.get(\"viz_data\");\n// bm Website for www.saksfifthavenue.com\nlet s5aIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\nlet websiteIndex   = msg.payload.aggregations.apps.buckets.findIndex((f)=> f.key === \"website\")\nlet s5aApache = viz_data.nodes[s5aIndex]\nlet websiteApp = msg.payload.aggregations.apps.buckets[websiteIndex]\n//create new nodes\nlet nodes = websiteApp.nodes.buckets.map((n)=>{\n            return {\n                \"name\": n.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n})\n\n// create connections between website and nodes\nwsConnNodes = websiteApp.nodes.buckets.map((m) =>{\n     let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n     for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": \"website\",\n    \"target\":  m.key,\n    \"metrics\": met\n    }    \n})\n\napacheConnWs = websiteApp.clients.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": m.key,\n    \"target\":  \"website\",\n    \"metrics\": met\n    }    \n})\n\n// Created Website Node\ns5aApache.nodes.push({\n              \"name\": \"website\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\",\n            })\ns5aApache.nodes = s5aApache.nodes.concat(nodes)\ns5aApache.connections = s5aApache.connections.concat(apacheConnWs).concat(wsConnNodes)\n\n\n//////////----------------------------------------\nglobal.set(\"viz_data\",viz_data);\nreturn msg","outputs":1,"noerr":0,"x":920,"y":260,"wires":[[]]},{"id":"e5ec2b70.dd0688","type":"es-aggregations","z":"470a8c0e.e665f4","name":"Packetbeat BM OUt","documentIndex":"infra_packetbeat-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":640,"y":380,"wires":[["dff5ae78.2ba5a"]]},{"id":"ed3033.d1878fd","type":"change","z":"470a8c0e.e665f4","name":"Search PacketBeat Flows","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must_not\":[{\"term\":{\"query\":\"flow\"}}],\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"http\"}},{\"term\":{\"direction\":\"out\"}},{\"query_string\":{\"query\":\"NOT host: sd1q* \"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"nodes\":{\"terms\":{\"field\":\"ip\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"ports\":{\"terms\":{\"field\":\"port\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"clients\":{\"terms\":{\"field\":\"client_ip\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.reponse.code\"}}}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":380,"wires":[["e5ec2b70.dd0688"]]},{"id":"dff5ae78.2ba5a","type":"function","z":"470a8c0e.e665f4","name":"transform BM Website Data ","func":"var viz_data = global.get(\"viz_data\");\nvar nodes = []\nvar connections = []\n// bm Website for www.saksfifthavenue.com\nlet websiteDest = msg.payload.aggregations\n//create new nodes\nfor ( var ni in websiteDest.nodes.buckets){\n    nodes.push({\n        \"name\": websiteDest.nodes.buckets[ni].key,\n        \"renderer\": \"focusedChild\",\n        \"class\": \"normal\"\n    })\n    for( var pi in websiteDest.nodes.buckets[ni].ports.buckets){\n        nodes.push({\n            \"name\": \"PORT \"+websiteDest.nodes.buckets[ni].ports.buckets[pi].key,\n            \"renderer\": \"focusedChild\",\n            \"class\": \"normal\"\n        })\n    }\n}\n// create connections between  nodes AND PORTS\nfor( var cn in websiteDest.nodes.buckets){\n    for ( var cnp in websiteDest.nodes.buckets[cn].ports.buckets){\n        let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for ( var i in websiteDest.nodes.buckets[cn].ports.buckets[cnp].metrics.buckets ){\n            let m = websiteDest.nodes.buckets[cn].ports.buckets[cnp].metrics.buckets[i]\n            if ( m.key < 400 )   met.normal  += m.doc_count;\n            if ( m.key >= 400 && \n                 m.key < 500 )   met.warning += m.doc_count;\n            if ( m.key >= 500 )  met.danger  += m.doc_count;\n        }\n        connections.push({\n            \"source\": \"PORT \"+websiteDest.nodes.buckets[cn].ports.buckets[cnp].key,\n            \"target\": websiteDest.nodes.buckets[cn].key,\n            \"metrics\": met\n        })\n        for( var cnpc in websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets) {\n            let cmet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for ( var i in websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].metrics.buckets ){\n                let cm = websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].metrics.buckets[i]\n                if ( cm.key < 400 )   cmet.normal  += cm.doc_count;\n                if ( cm.key >= 400 && \n                     cm.key < 500 )   cmet.warning += cm.doc_count;\n                if ( cm.key >= 500 )  cmet.danger  += cm.doc_count;\n            } // end metrics\n\n            connections.push({\n            \"source\": websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].key,\n            \"target\": \"PORT \"+websiteDest.nodes.buckets[cn].ports.buckets[cnp].key,\n            \"metrics\": met\n            }) // end push\n        } // end cnpc\n    } // end cnp\n} // end cn\n\n// Append nodes\nlet websiteIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\n\nviz_data.nodes[websiteIndex].nodes = viz_data.nodes[websiteIndex].nodes.concat(nodes)\nviz_data.nodes[websiteIndex].connections = viz_data.nodes[websiteIndex].connections.concat(connections)\n\n\n//////////----------------------------------------\nglobal.set(\"viz_data\",viz_data);\nreturn msg","outputs":1,"noerr":0,"x":900,"y":380,"wires":[[]]},{"id":"f9a1a8de.fb15b8","type":"es-aggregations","z":"470a8c0e.e665f4","name":"Packetbeat BM IN","documentIndex":"infra_packetbeat-*","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":610,"y":500,"wires":[["606e63d1.ac6fac"]]},{"id":"c303f99e.48b448","type":"change","z":"470a8c0e.e665f4","name":"Search PacketBeat Flows","rules":[{"t":"set","p":"body","pt":"msg","to":"{\"size\":0,\"query\":{\"bool\":{\"must_not\":[{\"term\":{\"query\":\"flow\"}}],\"must\":[{\"range\":{\"@timestamp\":{\"gt\":\"now-45m\"}}},{\"term\":{\"type\":\"http\"}},{\"term\":{\"direction\":\"in\"}},{\"query_string\":{\"query\":\"NOT host: sd1q* \"}}]}},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"nodes\":{\"terms\":{\"field\":\"ip\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"ports\":{\"terms\":{\"field\":\"port\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.response.code\"}},\"clients\":{\"terms\":{\"field\":\"client_ip\",\"size\":100},\"aggregations\":{\"metrics\":{\"terms\":{\"field\":\"http.reponse.code\"}}}}}}}}}}","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":350,"y":500,"wires":[["f9a1a8de.fb15b8"]]},{"id":"606e63d1.ac6fac","type":"function","z":"470a8c0e.e665f4","name":"transform BM Website Data ","func":"var viz_data = global.get(\"viz_data\");\nvar nodes = []\nvar connections = []\n// Append nodes\nlet websiteIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\n// bm Website for www.saksfifthavenue.com\nlet websiteDest = msg.payload.aggregations\n//create new nodes\nfor ( var ni in websiteDest.nodes.buckets){\n    nodes.push({\n        \"name\": websiteDest.nodes.buckets[ni].key,\n        \"renderer\": \"focusedChild\",\n        \"class\": \"normal\"\n    })\n    for( var pi in websiteDest.nodes.buckets[ni].ports.buckets){\n        portname = \"PORT \"+websiteDest.nodes.buckets[ni].ports.buckets[pi].key;\n        if( websiteDest.nodes.buckets[ni].ports.buckets[pi].key == 7010 ) portname = \"website\"\n        if( websiteDest.nodes.buckets[ni].ports.buckets[pi].key == 7005 ) continue\n        if( websiteDest.nodes.buckets[ni].ports.buckets[pi].key == 16000 ) portname = \"endeca\"\n        nodes.push({\n            \"name\": portname,\n            \"renderer\": \"focusedChild\",\n            \"class\": \"normal\"\n        })\n    }\n}\n// create connections between  nodes AND PORTS\nfor( var cn in websiteDest.nodes.buckets){\n    for ( var cnp in websiteDest.nodes.buckets[cn].ports.buckets){\n        let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n        for ( var i in websiteDest.nodes.buckets[cn].ports.buckets[cnp].metrics.buckets ){\n            let m = websiteDest.nodes.buckets[cn].ports.buckets[cnp].metrics.buckets[i]\n            if ( m.key < 400 )   met.normal  += m.doc_count;\n            if ( m.key >= 400 && \n                 m.key < 500 )   met.warning += m.doc_count;\n            if ( m.key >= 500 )  met.danger  += m.doc_count;\n        }\n        portname = \"PORT \"+websiteDest.nodes.buckets[cn].ports.buckets[cnp].key;\n        if( websiteDest.nodes.buckets[cn].ports.buckets[cnp].key == 7010 ) portname = \"website\"\n        if( websiteDest.nodes.buckets[cn].ports.buckets[cnp].key == 7005 ) continue\n        if( websiteDest.nodes.buckets[cn].ports.buckets[cnp].key == 16000 ) portname = \"endeca\"\n\n        connections.push({\n            \"source\": websiteDest.nodes.buckets[cn].key,\n            \"target\": portname,\n            \"metrics\": met\n        })\n        for( var cnpc in websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets) {\n            notfound = viz_data.nodes[websiteIndex].nodes.findIndex(\n                    (f) => f.name === websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].key)\n            if( notfound == -1 ){\n                nodes.push({\n                    \"name\":  websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].key,\n                    \"renderer\": \"focusedChild\",\n                    \"class\": \"normal\"\n                })\n            }\n            let cmet = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n            for ( var i in websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].metrics.buckets ){\n                let cm = websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].metrics.buckets[i]\n                if ( cm.key < 400 )   cmet.normal  += cm.doc_count;\n                if ( cm.key >= 400 && \n                     cm.key < 500 )   cmet.warning += cm.doc_count;\n                if ( cm.key >= 500 )  cmet.danger  += cm.doc_count;\n            } // end metrics\n            connections.push({\n                \"source\": websiteDest.nodes.buckets[cn].ports.buckets[cnp].clients.buckets[cnpc].key,\n                \"target\": portname,\n                \"metrics\": met\n            }) // end push\n        } // end cnpc\n    } // end cnp\n} // end cn\n\n\n\nviz_data.nodes[websiteIndex].nodes = viz_data.nodes[websiteIndex].nodes.concat(nodes)\nviz_data.nodes[websiteIndex].connections = viz_data.nodes[websiteIndex].connections.concat(connections)\n\n\n//////////----------------------------------------\nglobal.set(\"viz_data\",viz_data);\nreturn msg","outputs":1,"noerr":0,"x":880,"y":500,"wires":[[]]},{"id":"b5ef0c61.0b95b","type":"change","z":"470a8c0e.e665f4","name":"","rules":[{"t":"set","p":"viz_data","pt":"global","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":510,"y":60,"wires":[[]]},{"id":"dafcf21c.7b208","type":"function","z":"470a8c0e.e665f4","name":"","func":"msg.payload={\n    // Which graph renderer to use for this graph (currently only 'global' and 'region')\n    renderer: 'global',\n    // since the root object is a node, it has a name too.\n    name: 'edge',\n    // OPTIONAL: The maximum volume seen recently to relatively measure particle density. \n    // This 'global' maxVolume is optional because it can be calculated by using all of the required sub-node maxVolumes.\n    maxVolume: 1000000,\n    // list of nodes for this graph\n    nodes: [{\n        \"renderer\": 'region',\n        layout: 'ltrTree',\n        // OPTIONAL Override the default layout used for the renderer.\n        \"name\": 'INTERNET',\n        // Unix timestamp. Only checked at this level of nodes. Last time the data was updated \n        // (Needed because the client could be passed stale data when loaded)\n        metadata: {},\n        maxVolume: 1000000,\n        \"nodes\": [],\n        \"notices\":[{\n            // The title to display on the notice\n            title: 'Notice about something',\n            // OPTIONAL link to send the user when click on the notice\n            link: 'http://link/to/relevant/thing',\n            // OPTIONAL 0(default) for info level, 1 for warning level, 2 for error level (applies CSS styling)\n            severity: 1\n        }],\n        // The maximum volume seen recently to relatively measure particle density\n    }// end of INTERNET NODE\n    ],\n    connections:[]\n}\nreturn msg;","outputs":1,"noerr":0,"x":300,"y":60,"wires":[["b5ef0c61.0b95b"]]},{"id":"679b8c8c.4029b4","type":"change","z":"4d8fbb15.143764","name":"","rules":[{"t":"set","p":"payload","pt":"msg","to":"viz_data","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":400,"y":80,"wires":[["aec97687.17e968"]]},{"id":"aec97687.17e968","type":"json","z":"4d8fbb15.143764","name":"JSON to String","property":"payload","action":"str","pretty":true,"x":600,"y":80,"wires":[["6cc302ca.91b8dc"]]},{"id":"6cc302ca.91b8dc","type":"http response","z":"4d8fbb15.143764","name":"","statusCode":"","headers":{"content-type":"application/json"},"x":790,"y":80,"wires":[]},{"id":"54b2cf27.4d075","type":"link in","z":"4d8fbb15.143764","name":"Search","links":["6805fe96.496c7"],"x":195,"y":80,"wires":[["679b8c8c.4029b4"]]},{"id":"a8d3b59c.6bf598","type":"template","z":"78412a21.75dd14","name":"Search WebServers","field":"body","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"size\": 0,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"range\": {\n                        \"@timestamp\": {\n                            \"gt\": \"now-45m\"\n                        }\n                    }\n                },\n                {\n                    \"term\": {\n                        \"type\": \"apache\"\n                    }\n                },\n                {\n                    \"query_string\": {\n                        \"query\": \"host:sd1pwb*\"\n                    }\n                }\n            ]\n        }\n    },\n    \"aggregations\": {\n        \"metrics\": {\n            \"terms\": {\n                \"field\": \"response_code\"\n            }\n        },\n        \"regions\": {\n            \"terms\": {\n                \"field\": \"vhost\"\n            },\n            \"aggregations\": {\n                \"metrics\": {\n                    \"terms\": {\n                        \"field\": \"response_code\"\n                    }\n                },\n                \"nodes\": {\n                    \"terms\": {\n                        \"field\": \"host_ip\"\n                    },\n                    \"aggregations\": {\n                        \"metrics\": {\n                            \"terms\": {\n                                \"field\": \"response_code\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","output":"str","x":180,"y":100,"wires":[["9602cb9d.f75698"]]},{"id":"e7d5a666.3cec48","type":"template","z":"78412a21.75dd14","name":"Search BM Access Logs","field":"body","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"size\": 0,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"range\": {\n                        \"@timestamp\": {\n                            \"gt\": \"now-45m\"\n                        }\n                    }\n                },\n                {\n                    \"term\": {\n                        \"type\": \"bluemartini-accesslogs\"\n                    }\n                },\n                {\n                    \"query_string\": {\n                        \"query\": \"host:sd1pxx1*\"\n                    }\n                }\n            ]\n        }\n    },\n    \"aggregations\": {\n        \"metrics\": {\n            \"terms\": {\n                \"field\": \"response_code\"\n            }\n        },\n        \"apps\": {\n            \"terms\": {\n                \"field\": \"vhost\"\n            },\n            \"aggregations\": {\n                \"metrics\": {\n                    \"terms\": {\n                        \"field\": \"response_code\"\n                    }\n                },\n                \"nodes\": {\n                    \"terms\": {\n                        \"field\": \"host_ip\"\n                    },\n                    \"aggregations\": {\n                        \"metrics\": {\n                            \"terms\": {\n                                \"field\": \"response_code\"\n                            }\n                        }\n                    }\n                },\n                \"clients\": {\n                    \"terms\": {\n                        \"field\": \"clientip\"\n                    },\n                    \"aggregations\": {\n                        \"metrics\": {\n                            \"terms\": {\n                                \"field\": \"response_code\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}","output":"str","x":210,"y":260,"wires":[["8d53de17.a17f9"]]},{"id":"442b72c8.af1f0c","type":"function","z":"78412a21.75dd14","name":"transform S5A BM  Mobile Data ","func":"var viz_data = msg.viz_data\n// bm Website for www.saksfifthavenue.com\nlet s5aIndex       = viz_data.nodes.findIndex((f)=> f.name === \"m.saks.com\")\nlet websiteIndex   = msg.payload.aggregations.apps.buckets.findIndex((f)=> f.key === \"mobile\")\nlet s5aApache = viz_data.nodes[s5aIndex]\nlet websiteApp = msg.payload.aggregations.apps.buckets[websiteIndex]\n//create new nodes\nlet nodes = websiteApp.nodes.buckets.map((n)=>{\n            return {\n                \"name\": n.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n})\n\n// create connections between website and nodes\nwsConnNodes = websiteApp.nodes.buckets.map((m) =>{\n     let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n     for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": \"mobile\",\n    \"target\":  m.key,\n    \"metrics\": met\n    }    \n})\n\napacheConnWs = websiteApp.clients.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": m.key,\n    \"target\":  \"mobile\",\n    \"metrics\": met\n    }    \n})\n\n// Created Website Node\ns5aApache.nodes.push({\n              \"name\": \"mobile\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\",\n            })\ns5aApache.nodes = s5aApache.nodes.concat(nodes)\ns5aApache.connections = s5aApache.connections.concat(apacheConnWs).concat(wsConnNodes)\n\n\n//////////----------------------------------------\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":430,"y":340,"wires":[["b3d575b4.31b938"]]},{"id":"b3d575b4.31b938","type":"template","z":"78412a21.75dd14","name":"Search Endeca Request Logs","field":"body","fieldType":"msg","format":"json","syntax":"plain","template":"{\n    \"size\": 0,\n    \"query\": {\n        \"bool\": {\n            \"must\": [\n                {\n                    \"range\": {\n                        \"@timestamp\": {\n                            \"gt\": \"now-45m\"\n                        }\n                    }\n                },\n                {\n                    \"term\": {\n                        \"type\": \"endeca-reqlog\"\n                    }\n                },\n                {\n                    \"query_string\": {\n                        \"query\": \"host:sd1pxx1*\"\n                    }\n                }\n            ]\n        }\n    },\n    \"aggregations\": {\n        \"metrics\": {\n            \"terms\": {\n                \"field\": \"response_code\"\n            }\n        },\n        \"nodes\": {\n            \"terms\": {\n                \"field\": \"host_ip\"\n            },\n            \"aggregations\": {\n                \"metrics\": {\n                    \"terms\": {\n                        \"field\": \"response_code\"\n                    }\n                }\n            }\n        },\n        \"clients\": {\n            \"terms\": {\n                \"field\": \"client_ip\"\n            },\n            \"aggregations\": {\n                \"metrics\": {\n                    \"terms\": {\n                        \"field\": \"response_code\"\n                    }\n                }\n            }\n        }\n    }\n}","output":"str","x":190,"y":440,"wires":[["aded07e0.7e0dd8"]]},{"id":"aded07e0.7e0dd8","type":"es-aggregations","z":"78412a21.75dd14","name":"Edeca Access Logs","documentIndex":"*:s5a","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":470,"y":440,"wires":[["396d2ad.7e82dd6","a7c69f78.348f8"]]},{"id":"a7c69f78.348f8","type":"function","z":"78412a21.75dd14","name":"transform S5A BM  Website Data ","func":"var viz_data = msg.viz_data\n// bm Website for www.saksfifthavenue.com\nlet s5aIndex       = viz_data.nodes.findIndex((f)=> f.name === \"www.saksfifthavenue.com\")\nlet s5aApache = viz_data.nodes[s5aIndex]\nlet websiteApp = msg.payload.aggregations\n//create new nodes\nlet nodes = websiteApp.nodes.buckets.map((n)=>{\n            return {\n                \"name\": n.key,\n                \"renderer\": \"focusedChild\",\n                \"class\": \"normal\"\n            }\n})\n\n// create connections between endeca and nodes\nwsConnNodes = websiteApp.nodes.buckets.map((m) =>{\n     let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n     for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": \"endeca\",\n    \"target\":  m.key,\n    \"metrics\": met\n    }    \n})\n\napacheConnWs = websiteApp.clients.buckets.map((m) =>{\n    let met = { \"normal\": 0, \"warning\": 0, \"danger\": 0 }\n    for (i =0; i < m.metrics.buckets.length; i++){\n            if ( m.metrics.buckets[i].key < 400 )   met.normal  += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 400 && \n                 m.metrics.buckets[i].key < 500 )   met.warning += m.metrics.buckets[i].doc_count;\n            if ( m.metrics.buckets[i].key >= 500 )  met.danger  += m.metrics.buckets[i].doc_count;\n        }\n    return {\n    \"source\": m.key,\n    \"target\":  \"endeca\",\n    \"metrics\": met\n    }    \n})\n\n// Created Website Node\ns5aApache.nodes.push({\n              \"name\": \"endeca\",\n              \"renderer\": \"focusedChild\",\n              \"class\": \"normal\",\n            })\ns5aApache.nodes = s5aApache.nodes.concat(nodes)\ns5aApache.connections = s5aApache.connections.concat(apacheConnWs).concat(wsConnNodes)\n\n\n//////////----------------------------------------\nmsg.viz_data=viz_data\nreturn msg","outputs":1,"noerr":0,"x":730,"y":440,"wires":[["f527f39c.dcfcd"]]},{"id":"396d2ad.7e82dd6","type":"debug","z":"78412a21.75dd14","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":680,"y":400,"wires":[]},{"id":"8d53de17.a17f9","type":"es-aggregations","z":"78412a21.75dd14","name":"BM Access Logs","documentIndex":"*:s5a","documentType":"","query":"","sort":"","includeFields":"","maxResults":"0","server":"d3445511.71feb8","x":490,"y":260,"wires":[["f1cd6e91.6b892","c36d088b.a5cef8"]]}]